API协议：
====================================================================================================
命令
====================================================================================================
1.开始充电
URL: /api/start
JSON:
{
    "deviceId":"001040097808974",
    "plugId":1,
    "limitPower":250
}

其中：
deviceId：设备id
plugId：插座编号，从1开始
limitPower：最高充电量，单位为1/1000度

返回JSON：
{
	"returnCode":0,
	"returnMsg":"OK"
}
其中：
returnCode等于－1表示设备总体已经超过最大功率

====================================================================================================
通知(方法：POST url:/api/notify)
====================================================================================================
1.结束充电
JSON:
{
    "type": "stop",
    "sign": "337D17AD5E87311904A9A18EE81C1171",
    "nonce": "QEQFUCTMC21YM58YF3J5O2BZ7UB49DAS",
    "deviceId": "001040097808974",
    "plugId": 1,
    "remain": 250
}

其中：
type：通知命令类型，本条命令为stop
sign：签名，详见签名算法
nonce：随机字符串，不长于32位
deviceId：设备id
plugId：插座编号，从1开始
remain：充电剩余电量(最高充电量－实际消耗的电量)，单位为1/1000度

2.设备各插座状态
JSON:
{
    "type": "status",
    "sign": "337D17AD5E87311904A9A18EE81C1171",
    "nonce": "QEQFUCTMC21YM58YF3J5O2BZ7UB49DAS",
    "deviceId": "001040097808974",
    "plugStatusList": [{"remain":10,"power":33},{"remain":0,"power":0},{"remain":1000,"power":200}]
}

其中：
type：通知命令类型，本条命令为status
sign：签名，详见签名算法
nonce：随机字符串，不长于32位
deviceId：设备id
plugStatusList：各插座的当前剩余电量(单位：1/1000度)和当前功率(单位：瓦)

响应JSON:
{
	"returnCode":0,
	"returnMsg":"OK",
	"statusList":["U","F","U"]
}
其中:
statusList表示各插座是否在使用，U表示正在使用，F表示空闲

3.设备参数查询
该通知在设备每次上电时会发送一次，请求当前设备基本参数
JSON:
{
    "type": "param",
    "sign": "337D17AD5E87311904A9A18EE81C1171",
    "nonce": "QEQFUCTMC21YM58YF3J5O2BZ7UB49DAS",
    "deviceId": "001040097808974"
}

其中：
type：通知命令类型，本条命令为param
sign：签名，详见签名算法
nonce：随机字符串，不长于32位
deviceId：设备id

响应JSON:
{
	"returnCode":0,
	"returnMsg":"OK",
	"maxPlugPower":500,
	"maxDevicePower":2500,
	"cardPassword":"FFFFFFFFFFFF",
	"factor":1000,
	"remainList":[10,0,1000]
}
其中:
maxPlugPower:插座最大功率，单位瓦
maxDevicePower:设备最大总功率，单位瓦
cardPassword:卡密码，与此密码不同的充电卡在该设备上刷卡无效
factor:设备电表校准因子，1000表示一个标准单位
remainList:设备各个插座当前充电剩余电量

4.设备附加参数查询
该通知在设备每次上电时会发送一次，请求当前设备附加参数
JSON:
{
    "type": "attachParam",
    "sign": "337D17AD5E87311904A9A18EE81C1171",
    "nonce": "QEQFUCTMC21YM58YF3J5O2BZ7UB49DAS",
    "deviceId": "001040097808974"
}

其中：
type：通知命令类型，本条命令为attachParam
sign：签名，详见签名算法
nonce：随机字符串，不长于32位
deviceId：设备id

响应JSON:
{
	"returnCode":0,
	"returnMsg":"OK",
	"floatChargeTime":120
}
其中:
floatChargeTime:浮充充电时间，单位为分钟

5.查询卡片余额
用户在设备上刷卡时会发送该通知
JSON:
{
    "type": "cardBalance",
    "sign": "D9FC7620CC77302ECA84F735BB758BAA",
    "nonce": "0RV6B32D157WGXNU1CT3O9O9K1DM3WW3",
    "deviceId": "001040097808974",
    "cardId": "A50C8163"
}

其中：
type：通知命令类型，本条命令为cardBalance
sign：签名，详见签名算法
nonce：随机字符串，不长于32位
deviceId：设备id
cardId：刷卡卡号

响应JSON:
{
	"returnCode":0,
	"returnMsg":"OK",
	"balance":1000
}
其中:
balance:卡内余额，单位为分

6.卡充电请求
用户刷卡后选择开始充电时会发送该通知
JSON:
{
    "type": "cardCharge",
    "sign": "D9FC7620CC77302ECA84F735BB758BAA",
    "nonce": "0RV6B32D157WGXNU1CT3O9O9K1DM3WW3",
    "deviceId": "001040097808974",
    "plugId": 1,
    "cardId": "A50C8163"
}

其中：
type：通知命令类型，本条命令为cardCharge
sign：签名，详见签名算法
nonce：随机字符串，不长于32位
deviceId：设备id
plugId: 充电插座编号，从1开始
cardId：刷卡卡号

响应JSON:
{
	"returnCode":0,
	"returnMsg":"OK",
	"limitPower":2000
}
其中:
returnCode:-1－无效的设备插座 －2-插座已经在被其他人使用 －3－该插座已被其他人预订 －4－余额不足 -5－服务器异常 -6－无效的卡(卡号不存在或该卡不属于当前设备) -7-设备试用次数为0
limitPower:最高充电量，单位为1/1000度

====================================================================================================
协议规则
====================================================================================================
提交方式：采用POST方法提交
----------------------------------------------------------------------------------------------------
数据格式：提交和返回数据都为JSON格式
----------------------------------------------------------------------------------------------------
字符编码：统一采用UTF-8字符编码
----------------------------------------------------------------------------------------------------
命令认证方式：
基于用户名和密码的http Basic认证
----------------------------------------------------------------------------------------------------
签名算法：
签名生成的通用步骤如下： 
第一步，设所有发送或者接收到的数据为集合M，将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串stringA。
特别注意以下重要规则： 
a.参数名ASCII码从小到大排序（字典序）； 
b.如果参数的值为空不参与签名； 
c.参数名区分大小写； 
d.验证通知签名时，传送的sign参数不参与签名，将生成的签名与该sign值作校验。 

第二步，在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。
key的值为命令认证方式中的password

举例：
假设通知的参数如下：
{
    "type": "stop",
    "sign": "337D17AD5E87311904A9A18EE81C1171",
    "nonce": "QEQFUCTMC21YM58YF3J5O2BZ7UB49DAS",
    "deviceId": "001040097808974",
    "portId": 1,
    "quantity": 250
}
第一步：对参数按照key=value的格式，并按照参数名ASCII字典序排序如下：
stringA="deviceId=001040097808974&nonce=QEQFUCTMC21YM58YF3J5O2BZ7UB49DAS&portId=1&quantity=250&type=stop";

第二步：拼接API密钥：
stringSignTemp=stringA+"&key=12345"
sign=MD5(stringSignTemp).toUpperCase()="337D17AD5E87311904A9A18EE81C1171"

将计算出来的sign和通知参数中的sign做比对，验证发送通知的服务器的合法性，防止“假通知”
----------------------------------------------------------------------------------------------------
服务器通知：
对后台通知交互时，如果收到的应答不是成功(returnCode等于0表示成功)，则认为通知失败，会定期重新发起通知，尽可能提高通知的成功率。
通知发送的时间为：立刻发送、2分钟、5分钟
----------------------------------------------------------------------------------------------------
“命令”和“通知”交互中，应答数据的格式：
JSON:
{
	"returnCode":0,
	"returnMsg":"OK"
}

说明：
returnCode：0表示成功，负数表示失败
returnMsg：失败原因说明
----------------------------------------------------------------------------------------------------
